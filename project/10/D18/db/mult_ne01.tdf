--lpm_mult CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEDICATED_MULTIPLIER_CIRCUITRY="AUTO" DEVICE_FAMILY="FLEX10KE" DSP_BLOCK_BALANCING="Auto" INPUT_A_IS_CONSTANT="NO" INPUT_B_IS_CONSTANT="NO" LPM_REPRESENTATION="SIGNED" LPM_WIDTHA=8 LPM_WIDTHB=15 LPM_WIDTHP=23 LPM_WIDTHS=1 MAXIMIZE_SPEED=6 dataa datab result CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48
--VERSION_BEGIN 9.0SP2 cbx_cycloneii 2008:05:19:10:57:37:SJ cbx_lpm_add_sub 2009:05:07:10:25:28:SJ cbx_lpm_mult 2008:09:30:18:36:56:SJ cbx_mgl 2009:02:26:16:06:21:SJ cbx_padd 2008:09:04:11:11:31:SJ cbx_stratix 2008:09:18:16:08:35:SJ cbx_stratixii 2008:11:14:16:08:42:SJ cbx_util_mgl 2008:11:21:14:58:47:SJ  VERSION_END


-- Copyright (C) 1991-2009 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION carry_sum (cin, sin)
RETURNS ( cout, sout);
FUNCTION lcell (in)
RETURNS ( out);
FUNCTION soft (in)
RETURNS ( out);

--synthesis_resources = lut 159 
SUBDESIGN mult_ne01
( 
	dataa[7..0]	:	input;
	datab[14..0]	:	input;
	result[22..0]	:	output;
) 
VARIABLE
	add12_result[19..0]	:	WIRE;
	add16_result[15..0]	:	WIRE;
	add20_result[11..0]	:	WIRE;
	add8_result[22..0]	:	WIRE;
	cs1a[3..0] : carry_sum;
	cs3a[3..0] : carry_sum;
	le2a[15..0] : lcell;
	le4a[15..0] : lcell;
	le5a[15..0] : lcell;
	le6a[15..0] : lcell;
	le7a[15..0] : lcell;
	sft10a[22..0] : soft;
	sft11a[22..0] : soft;
	sft13a[19..0] : soft;
	sft14a[19..0] : soft;
	sft15a[19..0] : soft;
	sft17a[15..0] : soft;
	sft18a[15..0] : soft;
	sft19a[15..0] : soft;
	sft21a[11..0] : soft;
	sft22a[11..0] : soft;
	sft23a[11..0] : soft;
	sft9a[22..0] : soft;
	dataa_node[14..0]	: WIRE;
	datab_node[7..0]	: WIRE;
	final_result_node[22..0]	: WIRE;
	w135w[15..0]	: WIRE;
	w188w[15..0]	: WIRE;
	w245w[15..0]	: WIRE;
	w306w	: WIRE;
	w331w	: WIRE;
	w538w[22..0]	: WIRE;
	w7w[7..0]	: WIRE;
	w8w[15..0]	: WIRE;

BEGIN 
	add12_result[] = sft13a[].out + sft14a[].out;
	add16_result[] = sft17a[].out + sft18a[].out;
	add20_result[] = sft21a[].out + sft22a[].out;
	add8_result[] = sft9a[].out + sft10a[].out;
	cs1a[].cin = ( B"0", ((w7w[4..4] & cs1a[1].cout) # w7w[5..5]), ((w7w[2..2] & cs1a[0].cout) # w7w[3..3]), datab_node[1..1]);
	cs1a[].sin = ( cs1a[2].cout, ((((((! w7w[5..5]) & w7w[4..4]) & cs1a[1].cout) # ((w7w[5..5] & w7w[4..4]) & (! cs1a[1].cout))) # ((w7w[5..5] & (! w7w[4..4])) & cs1a[1].cout)) # ((w7w[5..5] & (! w7w[4..4])) & (! cs1a[1].cout))), ((((((! w7w[3..3]) & w7w[2..2]) & cs1a[0].cout) # ((w7w[3..3] & w7w[2..2]) & (! cs1a[0].cout))) # ((w7w[3..3] & (! w7w[2..2])) & cs1a[0].cout)) # ((w7w[3..3] & (! w7w[2..2])) & (! cs1a[0].cout))), datab_node[1..1]);
	cs3a[].cin = ( B"0", ((w7w[4..4] & cs3a[1].cout) # w7w[5..5]), ((w7w[2..2] & cs3a[0].cout) # w7w[3..3]), datab_node[1..1]);
	cs3a[].sin = ( (w7w[6..6] $ cs3a[2].cout), ((((((! w7w[5..5]) & (! w7w[4..4])) & cs3a[1].cout) # (((! w7w[5..5]) & w7w[4..4]) & (! cs3a[1].cout))) # ((w7w[5..5] & w7w[4..4]) & (! cs3a[1].cout))) # ((w7w[5..5] & (! w7w[4..4])) & cs3a[1].cout)), ((((((! w7w[3..3]) & (! w7w[2..2])) & cs3a[0].cout) # (((! w7w[3..3]) & w7w[2..2]) & (! cs3a[0].cout))) # ((w7w[3..3] & w7w[2..2]) & (! cs3a[0].cout))) # ((w7w[3..3] & (! w7w[2..2])) & cs3a[0].cout)), datab_node[0..0]);
	le2a[].in = (((((w7w[7..7] & (! w7w[6..6])) & (! cs1a[3].sout)) & (! ( dataa_node[], B"0"))) # ((((! w7w[7..7]) & w7w[6..6]) & cs1a[3].sout) & ( dataa_node[], B"0"))) # ((w7w[7..7] & w7w[6..6]) & cs1a[3].sout));
	le4a[].in = (! ((! le2a[].out) & (! (cs3a[3].sout & (w7w[7..7] $ ( dataa_node[14..14], dataa_node[]))))));
	le5a[].in = (! ((! (((! ( dataa_node[], B"0")) & cs1a[0].sout) & (! cs3a[0].sout))) & (! ((((! ( dataa_node[14..14], dataa_node[])) & cs1a[0].sout) & cs3a[0].sout) # ((( dataa_node[14..14], dataa_node[]) & (! cs1a[0].sout)) & cs3a[0].sout)))));
	le6a[].in = (! ((! (((! ( dataa_node[], B"0")) & cs1a[1].sout) & (! cs3a[1].sout))) & (! ((((! ( dataa_node[14..14], dataa_node[])) & cs1a[1].sout) & cs3a[1].sout) # ((( dataa_node[14..14], dataa_node[]) & (! cs1a[1].sout)) & cs3a[1].sout)))));
	le7a[].in = (! ((! (((! ( dataa_node[], B"0")) & cs1a[2].sout) & (! cs3a[2].sout))) & (! ((((! ( dataa_node[14..14], dataa_node[])) & cs1a[2].sout) & cs3a[2].sout) # ((( dataa_node[14..14], dataa_node[]) & (! cs1a[2].sout)) & cs3a[2].sout)))));
	sft10a[].in = ( w331w, ( sft15a[19..19].out, ( sft15a[18..18].out, ( sft19a[15..15].out, ( sft19a[14..14].out, ( sft19a[13..13].out, ( sft19a[12..12].out, ( sft19a[11..11].out, ( sft19a[10..10].out, ( sft19a[9..9].out, ( sft19a[8..8].out, ( sft19a[7..7].out, ( sft19a[6..6].out, ( sft19a[5..5].out, ( sft19a[4..4].out, ( sft19a[3..3].out, ( sft19a[2..2].out, ( sft19a[1..1].out, ( sft19a[0..0].out, ( sft15a[1..1].out, ( sft15a[0..0].out, ( w331w, cs1a[0].sout))))))))))))))))))))));
	sft11a[].in = add8_result[];
	sft13a[].in = ( w331w, ( w306w, ( le4a[13..13].out, ( le4a[12..12].out, ( le4a[11..11].out, ( le4a[10..10].out, ( le4a[9..9].out, ( le4a[8..8].out, ( le4a[7..7].out, ( le4a[6..6].out, ( le4a[5..5].out, ( le4a[4..4].out, ( le4a[3..3].out, ( le4a[2..2].out, ( le4a[1..1].out, ( le4a[0..0].out, ( le7a[1..1].out, ( le7a[0..0].out, ( le5a[3..2].out)))))))))))))))))));
	sft14a[].in = ( w331w, ( w331w, ( (! w245w[15..15]), ( le7a[14..14].out, ( le7a[13..13].out, ( sft23a[10..10].out, ( sft23a[9..9].out, ( sft23a[8..8].out, ( sft23a[7..7].out, ( sft23a[6..6].out, ( sft23a[5..5].out, ( sft23a[4..4].out, ( sft23a[3..3].out, ( sft23a[2..2].out, ( sft23a[1..1].out, ( sft23a[0..0].out, ( le6a[3..3].out, ( le6a[2..2].out, ( w331w, cs1a[1].sout)))))))))))))))))));
	sft15a[].in = add12_result[];
	sft17a[].in = ( w331w, ( w306w, ( (! w188w[15..15]), ( le7a[12..12].out, ( le7a[11..11].out, ( le7a[10..10].out, ( le7a[9..9].out, ( le7a[8..8].out, ( le7a[7..7].out, ( le7a[6..6].out, ( le7a[5..5].out, ( le7a[4..4].out, ( le7a[3..3].out, ( le7a[2..2].out, ( le5a[5..5].out, cs1a[2].sout)))))))))))))));
	sft18a[].in = ( w331w, ( w331w, ( sft23a[11..11].out, ( le6a[14..14].out, ( le6a[13..13].out, ( le6a[12..12].out, ( le6a[11..11].out, ( le6a[10..10].out, ( le6a[9..9].out, ( le6a[8..8].out, ( le6a[7..7].out, ( le6a[6..6].out, ( le6a[5..5].out, ( le6a[4..4].out, ( w331w, le5a[4..4].out)))))))))))))));
	sft19a[].in = add16_result[];
	sft21a[].in = ( w331w, ( w306w, ( w306w, ( le5a[14..14].out, ( le5a[13..13].out, ( le5a[12..12].out, ( le5a[11..11].out, ( le5a[10..10].out, ( le5a[9..9].out, ( le5a[8..8].out, ( le5a[7..6].out)))))))))));
	sft22a[].in = ( w331w, ( w331w, ( (! w135w[15..15]), ( w331w, ( w331w, ( w331w, ( w331w, ( w331w, ( w331w, ( w331w, ( w331w, w7w[7..7])))))))))));
	sft23a[].in = add20_result[];
	sft9a[].in = ( w306w, ( (! w8w[15..15]), ( le4a[14..14].out, ( sft15a[17..17].out, ( sft15a[16..16].out, ( sft15a[15..15].out, ( sft15a[14..14].out, ( sft15a[13..13].out, ( sft15a[12..12].out, ( sft15a[11..11].out, ( sft15a[10..10].out, ( sft15a[9..9].out, ( sft15a[8..8].out, ( sft15a[7..7].out, ( sft15a[6..6].out, ( sft15a[5..5].out, ( sft15a[4..4].out, ( sft15a[3..3].out, ( sft15a[2..2].out, ( le6a[1..1].out, ( le6a[0..0].out, ( le5a[1..0].out))))))))))))))))))))));
	dataa_node[] = ( datab[14..0]);
	datab_node[] = ( dataa[7..0]);
	final_result_node[] = ( w538w[22..0]);
	result[] = ( final_result_node[22..0]);
	w135w[] = le5a[].out;
	w188w[] = le6a[].out;
	w245w[] = le7a[].out;
	w306w = B"1";
	w331w = B"0";
	w538w[] = ( sft11a[22..21].out, sft11a[20..19].out, sft11a[18..17].out, sft11a[16..15].out, sft11a[14..13].out, sft11a[12..11].out, sft11a[10..9].out, sft11a[8..7].out, sft11a[6..5].out, sft11a[4..3].out, sft11a[2..1].out, sft11a[0..0].out);
	w7w[] = datab_node[];
	w8w[] = le4a[].out;
END;
--VALID FILE
